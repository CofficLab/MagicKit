import SwiftUI
@preconcurrency import WebKit

public struct MagicWebView: View {
    internal let url: URL
    internal let onLoadComplete: ((Error?) -> Void)?
    private var logger = MagicLogger.shared
    private let showLogView: Bool

    public init(
        url: URL,
        showLogView: Bool = false,
        onLoadComplete: ((Error?) -> Void)? = nil
    ) {
        self.url = url
        self.showLogView = showLogView
        self.onLoadComplete = onLoadComplete
        logger.info("ÂàõÂª∫ WebView: \(url.absoluteString)")
    }

    public var body: some View {
        VStack(spacing: 0) {
            if url.canOpenInWebView {
                #if os(iOS)
                    WebViewWrapper(url: url, logger: logger, onLoadComplete: onLoadComplete)
                        .onAppear {
                            logger.debug("WebView ËßÜÂõæÊòæÁ§∫")
                        }
                        .onDisappear {
                            logger.debug("WebView ËßÜÂõæÊ∂àÂ§±")
                        }
                #elseif os(macOS)
                    MacWebViewWrapper(url: url, logger: logger, onLoadComplete: onLoadComplete)
                        .onAppear {
                            logger.debug("WebView ËßÜÂõæÊòæÁ§∫")
                        }
                        .onDisappear {
                            logger.debug("WebView ËßÜÂõæÊ∂àÂ§±")
                        }
                #else
                    Text("WebView‰ªÖÊîØÊåÅiOSÂíåmacOSÂπ≥Âè∞")
                #endif
            } else {
                Text("‰∏çÊîØÊåÅÂú®WebView‰∏≠ÊâìÂºÄËØ•URL")
                    .onAppear {
                        logger.error("‰∏çÊîØÊåÅÁöÑURLÁ±ªÂûã: \(url.absoluteString)")
                    }
            }

            if showLogView {
                Divider()
                    .padding(.vertical, 4)

                logger.logView()
                    .frame(height: nil)
                    .frame(maxHeight: .infinity)
            }
        }
    }
}

#if os(iOS)
    private struct WebViewWrapper: UIViewRepresentable {
        let url: URL
        let logger: MagicLogger
        let onLoadComplete: ((Error?) -> Void)?

        func makeCoordinator() -> Coordinator {
            logger.debug("ÂàõÂª∫ WebView Coordinator")
            return Coordinator(url: url, logger: logger, onLoadComplete: onLoadComplete)
        }

        func makeUIView(context: Context) -> WKWebView {
            logger.info("üîÑ ÂáÜÂ§áÂä†ËΩΩÁΩëÈ°µ: \(url.absoluteString)")
            let webView = WKWebView()
            webView.navigationDelegate = context.coordinator
            webView.load(URLRequest(url: url))
            logger.debug("WebView Â∑≤ÂàõÂª∫Âπ∂ÂºÄÂßãÂä†ËΩΩ")
            return webView
        }

        func updateUIView(_ uiView: WKWebView, context: Context) {
            logger.debug("WebView Êõ¥Êñ∞")
        }
    }

    private class Coordinator: NSObject, WKNavigationDelegate {
        let url: URL
        let logger: MagicLogger
        let onLoadComplete: ((Error?) -> Void)?

        init(url: URL, logger: MagicLogger, onLoadComplete: ((Error?) -> Void)?) {
            self.url = url
            self.logger = logger
            self.onLoadComplete = onLoadComplete
            super.init()
            logger.debug("Coordinator ÂàùÂßãÂåñÂÆåÊàê")
        }

        func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
            logger.info("‚è≥ ÂºÄÂßãÂä†ËΩΩÁΩëÈ°µ: \(url.absoluteString)")
        }

        func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
            logger.info("üì° ÁΩëÈ°µÂÜÖÂÆπÂºÄÂßã‰º†Ëæì")
        }

        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            logger.info("‚úÖ ÁΩëÈ°µÂä†ËΩΩÂÆåÊàê: \(url.absoluteString)")
            onLoadComplete?(nil)
        }

        func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
            logger.error("‚ùå ÁΩëÈ°µÂä†ËΩΩÂ§±Ë¥•: \(error.localizedDescription)")
            onLoadComplete?(error)
        }

        func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
            logger.error("‚ùå ÁΩëÈ°µÈ¢ÑÂä†ËΩΩÂ§±Ë¥•: \(error.localizedDescription)")
            onLoadComplete?(error)
        }

        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            logger.debug("üîç ËØ∑Ê±ÇÂä†ËΩΩURL: \(navigationAction.request.url?.absoluteString ?? "unknown")")
            decisionHandler(.allow)
        }

        func webView(_ webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping (WKNavigationResponsePolicy) -> Void) {
            if let httpResponse = navigationResponse.response as? HTTPURLResponse {
                logger.debug("üì• Êî∂Âà∞ÂìçÂ∫î: HTTP \(httpResponse.statusCode)")
            }
            decisionHandler(.allow)
        }
    }

#elseif os(macOS)
    private struct MacWebViewWrapper: NSViewRepresentable {
        let url: URL
        let logger: MagicLogger
        let onLoadComplete: ((Error?) -> Void)?

        func makeCoordinator() -> Coordinator {
            Coordinator(url: url, logger: logger, onLoadComplete: onLoadComplete)
        }

        func makeNSView(context: Context) -> WKWebView {
            logger.info("ÂáÜÂ§áÂä†ËΩΩÁΩëÈ°µ: \(url.absoluteString)")
            let webView = WKWebView()
            webView.navigationDelegate = context.coordinator
            webView.load(URLRequest(url: url))
            logger.debug("WebViewÂ∑≤ÂàõÂª∫Âπ∂ÂºÄÂßãÂä†ËΩΩ")
            return webView
        }

        func updateNSView(_ nsView: WKWebView, context: Context) {
            logger.debug("WebViewÊõ¥Êñ∞")
        }
    }

    private class Coordinator: NSObject, WKNavigationDelegate {
        let url: URL
        let logger: MagicLogger
        let onLoadComplete: ((Error?) -> Void)?

        init(url: URL, logger: MagicLogger, onLoadComplete: ((Error?) -> Void)?) {
            self.url = url
            self.logger = logger
            self.onLoadComplete = onLoadComplete
        }

        func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
            logger.info("ÂºÄÂßãÂä†ËΩΩÁΩëÈ°µÂÜÖÂÆπ: \(url.absoluteString)")
        }

        func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
            logger.info("ÁΩëÈ°µÂÜÖÂÆπÂºÄÂßã‰º†Ëæì")
        }

        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            logger.info("‚úÖ ÁΩëÈ°µÂä†ËΩΩÂÆåÊàê: \(url.absoluteString)")
            onLoadComplete?(nil)
        }

        func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
            logger.error("‚ùå ÁΩëÈ°µÂä†ËΩΩÂ§±Ë¥•: \(error.localizedDescription)")
            onLoadComplete?(error)
        }

        func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
            logger.error("‚ùå ÁΩëÈ°µÈ¢ÑÂä†ËΩΩÂ§±Ë¥•: \(error.localizedDescription)")
            onLoadComplete?(error)
        }

        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            logger.debug("ËØ∑Ê±ÇÂä†ËΩΩURL: \(navigationAction.request.url?.absoluteString ?? "unknown")")
            decisionHandler(.allow)
        }

        func webView(_ webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping (WKNavigationResponsePolicy) -> Void) {
            if let httpResponse = navigationResponse.response as? HTTPURLResponse {
                logger.debug("Êî∂Âà∞ÂìçÂ∫î: HTTP \(httpResponse.statusCode)")
            }
            decisionHandler(.allow)
        }
    }
#endif

#Preview("WebView Demo") {
    MagicWebViewDemo()
        .frame(height: 800)
}
